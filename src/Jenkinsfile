def reqPost(url, body) {
    return httpRequest(authentication: 'shariktlt_devops_token', url: url, requestBody: body, httpMode: 'POST', validResponseCodes: '100:599', contentType: 'APPLICATION_JSON')
}

def review(action, text) {
    reqPost("${PR_URL}/reviews", "{\"body\": \"${text}\", \"event\":\"${action}\"}")
}

def ALLOWED_ACTIONS = ['opened', 'synchronize', 'edited']

def targetBranch = "main"

pipeline {
    agent { node { label 'common' } }

    parameters {
        string(name: 'ACTION', defaultValue: 'ping')
        string(name: 'SOURCE_SCM', defaultValue: '')
        string(name: 'SOURCE_SCM_BRANCH', defaultValue: '')
        string(name: 'TARGET_SCM', defaultValue: '')
        string(name: 'PR_URL', defaultValue: '')
        string(name: 'TARGET_FULLNAME', defaultValue: '')
        string(name: 'SOURCE_FULLNAME', defaultValue: '')
        string(name: 'PR_TITLE', defaultValue: '')

    }


    stages {

        stage('Setup') {
            steps {

                echo 'Building...'
                echo "ACTION = '${ACTION}'"
                echo "SOURCE_SCM = '${SOURCE_SCM}'"
                echo "SOURCE_SCM_BRANCH = '${SOURCE_SCM_BRANCH}'"
                echo "TARGET_SCM = '${TARGET_SCM}'"
                echo "PR_URL = '${PR_URL}'"
                echo "TARGET_FULLNAME = '${TARGET_FULLNAME}'"
                echo "SOURCE_FULLNAME = '${SOURCE_FULLNAME}'"
                script {
                    currentBuild.displayName = "#${BUILD_NUMBER}: ${SOURCE_FULLNAME} > ${TARGET_FULLNAME}"
                    def (user_tmp, branch_tmp) = "${TARGET_FULLNAME}".split(":")
                    targetBranch = branch_tmp
                }

            }
        }

        stage('clean_ws') {
            steps {
                cleanWs()
            }
        }

        stage('checkout repository') {
            when {
                expression { return ALLOWED_ACTIONS.contains(env.ACTION); }
            }

            steps {
                git branch: "${SOURCE_SCM_BRANCH}", url: "${SOURCE_SCM}", credentialsId: 'shariktlt-devops-local-ssh'
              
                sh "git remote add origin2 ${TARGET_SCM}"
                sh "git fetch origin2"
                sh "git checkout origin2/${targetBranch}"
                sh "git merge ${SOURCE_SCM_BRANCH} -m \"merge with ${targetBranch}\" "
            }
        }

        stage('build') {
            when {
                expression { return ALLOWED_ACTIONS.contains(env.ACTION); }
            }
            steps {
                script {
                    def singlePom = fileExists 'pom.xml'

                    println("pom.xml in root = '${singlePom}'")
                    
                    if (singlePom) {
                        try {
                            withMaven {
                                sh "mvn clean verify"
                            }
                        } catch (Exception e) {
                            review("REQUEST_CHANGES", ":no_entry: build failed, see: ${BUILD_URL}")
                            throw e
                        }

                        review("APPROVE", ":ok: build ok, see: ${BUILD_URL}")
                    } else {
                        def failedModules = []

                        def buildOnly = []
                        def matcherTitle = "${PR_TITLE}" =~ /\[buildOnly:([^\]]+)\]/
                        if(matcherTitle.find()){
                            buildOnly.addAll(matcherTitle.group(1).split(","))
                            matcherTitle = null
                        }
                        matcherTitle = null

                        def output = sh returnStdout: true, script: "ls -l | grep ^d | awk '{print \$9}'"
                        output.tokenize('\n').collect() {
                            def module = it
                            if(buildOnly.size() > 0 && !buildOnly.contains(module)){
                                println "skip module ${module}"
                                return true
                            }
                            try {
                                timeout(time:90, unit:'SECONDS') {
                                    withMaven {
                                        sh "cd ${module} && mvn clean verify"
                                    }
                                }
                            } catch (Exception e) {
                                failedModules.add(module)
                            }
                        }


                        if (failedModules.size() == 0) {
                            review("APPROVE", ":ok: build ok, see: ${BUILD_URL}")
                        } else {
                            def FAILED_MODULES_STR = failedModules.join(", ")
                            review("REQUEST_CHANGES", ":no_entry: build failed with modules ${FAILED_MODULES_STR}, see: ${BUILD_URL}")
                            currentBuild.result = "UNSTABLE"
                        }
                    }
                }
            }
        }
    }
}
